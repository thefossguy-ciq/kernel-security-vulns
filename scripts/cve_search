#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (c) 2024 - Greg Kroah-Hartman <gregkh@linuxfoundation.org>
#
# cve_search - Search the published CVE records for the specified git id, or
# for the git id of a specified CVE
#
# If it is found, the CVE id or the git id is returned.
# If it is not found, returns an error.
#
# Usage:
#	cve_search [GIT_ID]
#

# Colors are good!
if [[ -t 1 ]]; then
	txtred=$(tput setaf 1)		# Red
	txtgrn=$(tput setaf 2)		# Green
	txtblu=$(tput setaf 4)		# Blue
	txtcyn=$(tput setaf 6)		# Cyan
	txtrst=$(tput sgr0)		# Text reset
else
	txtred=""
	txtgrn=""
	txtblu=""
	txtcyn=""
	txtrst=""
fi

# don't use unset variables
set -o nounset

# set where the tool was run from,
# the name of our script,
# and the git version of it
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SCRIPT=${0##*/}

help() {
	echo "${SCRIPT} [GIT_ID]"
	exit 1
}

STRING="${1:-}"
if [[ "${STRING}" == "" ]] ; then
	help
fi

CVE_ROOT="${DIR}/../cve/"
PUBLISHED_DIR="${CVE_ROOT}published/"

# Treat the string as a SHA1 first:
found=$(grep -r -l "${STRING}" "${CVE_ROOT}"/published/ "${CVE_ROOT}"/rejected/ | grep "sha1")
if [[ "${found}" != "" ]]; then
	cve=$(basename "${found}" | cut -f 1 -d '.')
	echo "${txtcyn}${cve} is assigned to git id ${txtgrn}${STRING}${txtrst}"
	exit 0
fi

# Treat the string as a CVE id
found=$(find "${CVE_ROOT}/" -type f | grep "${STRING}" | grep "sha1")
if [[ "${found}" != "" ]]; then
	sha=$(cat ${found})
	echo "${txtcyn}${STRING}${txtrst} is assigned to git id ${txtgrn}${sha}${txtrst}"
        exit 0
fi

echo "${STRING} not found in any CVE record, sorry."
exit 1
