#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (c) 2024 - Greg Kroah-Hartman <gregkh@linuxfoundation.org>
#
# cve_create - Create a CVE entry to be submitted to the CVE database based on
# a provide git commit id
#
# Will look through the list of reserved cve ids and find the one for the year
# that the git commit was authored.  If none is availble, will exit with an
# error.
#
# If a free one is found, the new "database" entry will be created with files
# in the format that can be submitted both to CVE and for the mail
# notification.
#
# Usage:
#	cve_create [GIT_SHA]
#
# Requires:
#  A kernel git tree with the SHA to be used in it
#  bippy

# TODO - make this options that are not hard-coded
KERNEL_TREE="/home/gregkh/linux/stable/linux-stable"

# Colors are good!
txtred=$(tput setaf 1)		# Red
txtgrn=$(tput setaf 2)		# Green
txtblu=$(tput setaf 4)		# Blue
txtcyn=$(tput setaf 6)		# Cyan
txtrst=$(tput sgr0)		# Text reset

# don't use unset variables
set -o nounset

# set where the tool was run from,
# the name of our script,
# and the git version of it
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SCRIPT=${0##*/}

help() {
	echo "${SCRIPT} [GIT_SHA]"
	echo "	Note, CVE_USER must be set to your CVE_USER email address"
	exit 1
}

GIT_SHA="${1:-}"
if [[ "${GIT_SHA}" == "" ]] ; then
	help
fi

USER="${CVE_USER:-}"
if [[ "${USER}" == "" ]] ; then
	help
fi

# See if the SHA given to us is a valid SHA in the git repo
# and turning the sha into a "full" one so that we don't get this wrong.
GIT_SHA_FULL=$(cd ${KERNEL_TREE} && git log -1 --format="%H" "${GIT_SHA}")
if [[ "${GIT_SHA_FULL}" == "" ]] ; then
	echo "error: git id ${GIT_SHA} is not found in the tree at ${KERNEL_TREE}"
	exit 1
fi

GIT_COMMIT=$(cd ${KERNEL_TREE} && git show -s --abbrev-commit --abbrev=12 --pretty=format:"%h (\"%s\")%n" "${GIT_SHA_FULL}")

YEAR=$(cd ${KERNEL_TREE} && git log -1 --format="%as" "${GIT_SHA_FULL}" | cut -f 1 -d '-')
if [[ "${YEAR}" == "" ]] ; then
	echo "error: can not determine the date of the commit!"
	exit 1
fi
#echo "year = ${YEAR}"

CVE_ROOT="${DIR}/../cve/"

RESERVED_DIR="${CVE_ROOT}reserved/${YEAR}/"
PUBLISHED_DIR="${CVE_ROOT}published/${YEAR}/"

# make sure we haven't allocated a CVE already for this id
found=$(${DIR}/cve_search ${GIT_SHA_FULL})
found_result=$?
if [[ "${found_result}" == "0" ]]; then
	exist=$(echo "${found}" | awk '{print $1}')
	echo "${txtred}ERROR: The git id ${txtcyn}${GIT_SHA_FULL}${txtrst} is already assigned to ${txtgrn}${exist}${txtrst}"
	exit 1
fi

# Go into the directory for the year asked for
cd "${RESERVED_DIR}" 2> /dev/null
if [[ $? -ne 0 ]]; then
	echo "No free ids found in ${RESERVED_DIR}"
	echo "Should you allocate some more for that year?"
	exit 1
fi

# find a free id
ID=$(ls | sort -V | head -n 1)

if [[ "${ID}" == "" ]] ; then
	echo "No free id found for ${YEAR}"
	echo "Should you allocate some more for that year?"
	exit 1
fi
#echo "ID=${ID}"

# Make the new year directory, if it is not present
# fixme, test if present first, as we shouldn't be rude here
mkdir "${PUBLISHED_DIR}" 2> /dev/null

# write the new entry, using the SHA given to us
# by moving the original entry and then writing to it
mv "${ID}" "${PUBLISHED_DIR}"
echo "${GIT_SHA_FULL}" > "${PUBLISHED_DIR}/${ID}.sha1"

# write the new json and mbox entry out, using bippy
"${DIR}"/bippy --cve="${ID}" --user="${USER}" --sha="${GIT_SHA_FULL}" --json="${PUBLISHED_DIR}/${ID}.json" --mbox="${PUBLISHED_DIR}/${ID}.mbox"
result=$?
if [[ "${result}" != 0 ]]; then
	# move the id back to the reserved area and delete the .sha1 file
	mv "${PUBLISHED_DIR}/${ID}" "${RESERVED_DIR}"
	rm "${PUBLISHED_DIR}/${ID}.sha1"
	echo "${txtred}Error:${txtrst} bippy failed to create ${txtcyn}${ID}${txtrst} for commit ${txtgrn}${GIT_COMMIT}${txtrst}"
	exit 1
fi

# say all is good, and give the id
echo "${txtcyn}${ID}${txtrst} is now allocated for commit ${txtgrn}${GIT_COMMIT}${txtrst}"
