From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2023-53730: blk-iocost: use spin_lock_irqsave in adjust_inuse_and_calc_cost
Message-Id: <2025102216-CVE-2023-53730-d257@gregkh>
Content-Length: 6205
Lines: 145
X-Developer-Signature: v=1; a=openpgp-sha256; l=6351;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=bcCnwInNXO/U2mc4QWKfQ3HZseJCXOIcpkA125PAX18=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBk/bjNcFBCym9t56+fproTrquUuxgFa++62z/pTvUcs0
 1wzNedCRywLgyATg6yYIsuXbTxH91ccUvQytD0NM4eVCWQIAxenAEwk6T/DfJe5gbceHTjZoB3k
 2Xn841s56QOnrzHML3yaUXthzyTdnM1BM7m1b22tCjx0GQA=
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

blk-iocost: use spin_lock_irqsave in adjust_inuse_and_calc_cost

adjust_inuse_and_calc_cost() use spin_lock_irq() and IRQ will be enabled
when unlock. DEADLOCK might happen if we have held other locks and disabled
IRQ before invoking it.

Fix it by using spin_lock_irqsave() instead, which can keep IRQ state
consistent with before when unlock.

  ================================
  WARNING: inconsistent lock state
  5.10.0-02758-g8e5f91fd772f #26 Not tainted
  --------------------------------
  inconsistent {IN-HARDIRQ-W} -> {HARDIRQ-ON-W} usage.
  kworker/2:3/388 [HC0[0]:SC0[0]:HE0:SE1] takes:
  ffff888118c00c28 (&bfqd->lock){?.-.}-{2:2}, at: spin_lock_irq
  ffff888118c00c28 (&bfqd->lock){?.-.}-{2:2}, at: bfq_bio_merge+0x141/0x390
  {IN-HARDIRQ-W} state was registered at:
    __lock_acquire+0x3d7/0x1070
    lock_acquire+0x197/0x4a0
    __raw_spin_lock_irqsave
    _raw_spin_lock_irqsave+0x3b/0x60
    bfq_idle_slice_timer_body
    bfq_idle_slice_timer+0x53/0x1d0
    __run_hrtimer+0x477/0xa70
    __hrtimer_run_queues+0x1c6/0x2d0
    hrtimer_interrupt+0x302/0x9e0
    local_apic_timer_interrupt
    __sysvec_apic_timer_interrupt+0xfd/0x420
    run_sysvec_on_irqstack_cond
    sysvec_apic_timer_interrupt+0x46/0xa0
    asm_sysvec_apic_timer_interrupt+0x12/0x20
  irq event stamp: 837522
  hardirqs last  enabled at (837521): [<ffffffff84b9419d>] __raw_spin_unlock_irqrestore
  hardirqs last  enabled at (837521): [<ffffffff84b9419d>] _raw_spin_unlock_irqrestore+0x3d/0x40
  hardirqs last disabled at (837522): [<ffffffff84b93fa3>] __raw_spin_lock_irq
  hardirqs last disabled at (837522): [<ffffffff84b93fa3>] _raw_spin_lock_irq+0x43/0x50
  softirqs last  enabled at (835852): [<ffffffff84e00558>] __do_softirq+0x558/0x8ec
  softirqs last disabled at (835845): [<ffffffff84c010ff>] asm_call_irq_on_stack+0xf/0x20

  other info that might help us debug this:
   Possible unsafe locking scenario:

         CPU0
         ----
    lock(&bfqd->lock);
    <Interrupt>
      lock(&bfqd->lock);

   *** DEADLOCK ***

  3 locks held by kworker/2:3/388:
   #0: ffff888107af0f38 ((wq_completion)kthrotld){+.+.}-{0:0}, at: process_one_work+0x742/0x13f0
   #1: ffff8881176bfdd8 ((work_completion)(&td->dispatch_work)){+.+.}-{0:0}, at: process_one_work+0x777/0x13f0
   #2: ffff888118c00c28 (&bfqd->lock){?.-.}-{2:2}, at: spin_lock_irq
   #2: ffff888118c00c28 (&bfqd->lock){?.-.}-{2:2}, at: bfq_bio_merge+0x141/0x390

  stack backtrace:
  CPU: 2 PID: 388 Comm: kworker/2:3 Not tainted 5.10.0-02758-g8e5f91fd772f #26
  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.14.0-0-g155821a1990b-prebuilt.qemu.org 04/01/2014
  Workqueue: kthrotld blk_throtl_dispatch_work_fn
  Call Trace:
   __dump_stack lib/dump_stack.c:77 [inline]
   dump_stack+0x107/0x167
   print_usage_bug
   valid_state
   mark_lock_irq.cold+0x32/0x3a
   mark_lock+0x693/0xbc0
   mark_held_locks+0x9e/0xe0
   __trace_hardirqs_on_caller
   lockdep_hardirqs_on_prepare.part.0+0x151/0x360
   trace_hardirqs_on+0x5b/0x180
   __raw_spin_unlock_irq
   _raw_spin_unlock_irq+0x24/0x40
   spin_unlock_irq
   adjust_inuse_and_calc_cost+0x4fb/0x970
   ioc_rqos_merge+0x277/0x740
   __rq_qos_merge+0x62/0xb0
   rq_qos_merge
   bio_attempt_back_merge+0x12c/0x4a0
   blk_mq_sched_try_merge+0x1b6/0x4d0
   bfq_bio_merge+0x24a/0x390
   __blk_mq_sched_bio_merge+0xa6/0x460
   blk_mq_sched_bio_merge
   blk_mq_submit_bio+0x2e7/0x1ee0
   __submit_bio_noacct_mq+0x175/0x3b0
   submit_bio_noacct+0x1fb/0x270
   blk_throtl_dispatch_work_fn+0x1ef/0x2b0
   process_one_work+0x83e/0x13f0
   process_scheduled_works
   worker_thread+0x7e3/0xd80
   kthread+0x353/0x470
   ret_from_fork+0x1f/0x30

The Linux kernel CVE team has assigned CVE-2023-53730 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.10 with commit b0853ab4a238c54b8f97ca7dde1ae156e2bbd5e4 and fixed in 5.10.188 with commit 8563b58a4360e648ce18f0e98a75a4be51667431
	Issue introduced in 5.10 with commit b0853ab4a238c54b8f97ca7dde1ae156e2bbd5e4 and fixed in 5.15.121 with commit eb120c0aff5ceab9c9c46b87f302465bbf2bbaed
	Issue introduced in 5.10 with commit b0853ab4a238c54b8f97ca7dde1ae156e2bbd5e4 and fixed in 6.1.39 with commit 8ceeb3fc86a83700bb1585c189006080a47e8506
	Issue introduced in 5.10 with commit b0853ab4a238c54b8f97ca7dde1ae156e2bbd5e4 and fixed in 6.3.13 with commit 9279a1b74ad98039d5d44d26b9e7a9cfe655b6d3
	Issue introduced in 5.10 with commit b0853ab4a238c54b8f97ca7dde1ae156e2bbd5e4 and fixed in 6.4.4 with commit 3376c4fe2db4aea2dc721a27a999c41fdb45b54f
	Issue introduced in 5.10 with commit b0853ab4a238c54b8f97ca7dde1ae156e2bbd5e4 and fixed in 6.5 with commit 8d211554679d0b23702bd32ba04aeac0c1c4f660

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2023-53730
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	block/blk-iocost.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/8563b58a4360e648ce18f0e98a75a4be51667431
	https://git.kernel.org/stable/c/eb120c0aff5ceab9c9c46b87f302465bbf2bbaed
	https://git.kernel.org/stable/c/8ceeb3fc86a83700bb1585c189006080a47e8506
	https://git.kernel.org/stable/c/9279a1b74ad98039d5d44d26b9e7a9cfe655b6d3
	https://git.kernel.org/stable/c/3376c4fe2db4aea2dc721a27a999c41fdb45b54f
	https://git.kernel.org/stable/c/8d211554679d0b23702bd32ba04aeac0c1c4f660
