From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2023-53182: ACPICA: Avoid undefined behavior: applying zero offset to null pointer
Message-Id: <2025091556-CVE-2023-53182-dcdb@gregkh>
Content-Length: 5570
Lines: 82
X-Developer-Signature: v=1; a=openpgp-sha256; l=5653;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=ix+BpWkSg5T8oxss05x3vrCDBVXdORSQ22HwPRjT/l0=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBknZEK4VigfV+BYpmDuEXT11pYZGYyqBieMNNQWPZVfu
 VhFUPptRywLgyATg6yYIsuXbTxH91ccUvQytD0NM4eVCWQIAxenAEzEjYthnk2Y0EvV2P05jUw3
 wpP6/rxos/pTy7BgVxjPtaqcskPcVYZOwknWYjZRdisB
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

ACPICA: Avoid undefined behavior: applying zero offset to null pointer

ACPICA commit 770653e3ba67c30a629ca7d12e352d83c2541b1e

Before this change we see the following UBSAN stack trace in Fuchsia:

  #0    0x000021e4213b3302 in acpi_ds_init_aml_walk(struct acpi_walk_state*, union acpi_parse_object*, struct acpi_namespace_node*, u8*, u32, struct acpi_evaluate_info*, u8) ../../third_party/acpica/source/components/dispatcher/dswstate.c:682 <platform-bus-x86.so>+0x233302
  #1.2  0x000020d0f660777f in ubsan_get_stack_trace() compiler-rt/lib/ubsan/ubsan_diag.cpp:41 <libclang_rt.asan.so>+0x3d77f
  #1.1  0x000020d0f660777f in maybe_print_stack_trace() compiler-rt/lib/ubsan/ubsan_diag.cpp:51 <libclang_rt.asan.so>+0x3d77f
  #1    0x000020d0f660777f in ~scoped_report() compiler-rt/lib/ubsan/ubsan_diag.cpp:387 <libclang_rt.asan.so>+0x3d77f
  #2    0x000020d0f660b96d in handlepointer_overflow_impl() compiler-rt/lib/ubsan/ubsan_handlers.cpp:809 <libclang_rt.asan.so>+0x4196d
  #3    0x000020d0f660b50d in compiler-rt/lib/ubsan/ubsan_handlers.cpp:815 <libclang_rt.asan.so>+0x4150d
  #4    0x000021e4213b3302 in acpi_ds_init_aml_walk(struct acpi_walk_state*, union acpi_parse_object*, struct acpi_namespace_node*, u8*, u32, struct acpi_evaluate_info*, u8) ../../third_party/acpica/source/components/dispatcher/dswstate.c:682 <platform-bus-x86.so>+0x233302
  #5    0x000021e4213e2369 in acpi_ds_call_control_method(struct acpi_thread_state*, struct acpi_walk_state*, union acpi_parse_object*) ../../third_party/acpica/source/components/dispatcher/dsmethod.c:605 <platform-bus-x86.so>+0x262369
  #6    0x000021e421437fac in acpi_ps_parse_aml(struct acpi_walk_state*) ../../third_party/acpica/source/components/parser/psparse.c:550 <platform-bus-x86.so>+0x2b7fac
  #7    0x000021e4214464d2 in acpi_ps_execute_method(struct acpi_evaluate_info*) ../../third_party/acpica/source/components/parser/psxface.c:244 <platform-bus-x86.so>+0x2c64d2
  #8    0x000021e4213aa052 in acpi_ns_evaluate(struct acpi_evaluate_info*) ../../third_party/acpica/source/components/namespace/nseval.c:250 <platform-bus-x86.so>+0x22a052
  #9    0x000021e421413dd8 in acpi_ns_init_one_device(acpi_handle, u32, void*, void**) ../../third_party/acpica/source/components/namespace/nsinit.c:735 <platform-bus-x86.so>+0x293dd8
  #10   0x000021e421429e98 in acpi_ns_walk_namespace(acpi_object_type, acpi_handle, u32, u32, acpi_walk_callback, acpi_walk_callback, void*, void**) ../../third_party/acpica/source/components/namespace/nswalk.c:298 <platform-bus-x86.so>+0x2a9e98
  #11   0x000021e4214131ac in acpi_ns_initialize_devices(u32) ../../third_party/acpica/source/components/namespace/nsinit.c:268 <platform-bus-x86.so>+0x2931ac
  #12   0x000021e42147c40d in acpi_initialize_objects(u32) ../../third_party/acpica/source/components/utilities/utxfinit.c:304 <platform-bus-x86.so>+0x2fc40d
  #13   0x000021e42126d603 in acpi::acpi_impl::initialize_acpi(acpi::acpi_impl*) ../../src/devices/board/lib/acpi/acpi-impl.cc:224 <platform-bus-x86.so>+0xed603

Add a simple check that avoids incrementing a pointer by zero, but
otherwise behaves as before. Note that our findings are against ACPICA
20221020, but the same code exists on master.

The Linux kernel CVE team has assigned CVE-2023-53182 to this issue.


Affected and fixed versions
===========================

	Fixed in 4.14.316 with commit 5a2d0dcb47b16f84880a59571eab8a004e3236d7
	Fixed in 4.19.284 with commit 35465c7a91c6b46e7c14d0c01d0084349a38ce51
	Fixed in 5.4.244 with commit 710e09fd116e2fa53e319a416ad4e4f8027682b6
	Fixed in 5.10.181 with commit 16359bc02c093b0862e31739c07673340a2106a6
	Fixed in 5.15.113 with commit 3a7a4aa3958ce0c4938a443d65001debe9a9af9c
	Fixed in 6.1.30 with commit 8c4a7163b7f1495e3cc58bec7a4100de6612cde9
	Fixed in 6.3.4 with commit 3048c6b84a51e4ba4a89385ed218d19a670edd47
	Fixed in 6.4 with commit 05bb0167c80b8f93c6a4e0451b7da9b96db990c2

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2023-53182
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	drivers/acpi/acpica/dswstate.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/5a2d0dcb47b16f84880a59571eab8a004e3236d7
	https://git.kernel.org/stable/c/35465c7a91c6b46e7c14d0c01d0084349a38ce51
	https://git.kernel.org/stable/c/710e09fd116e2fa53e319a416ad4e4f8027682b6
	https://git.kernel.org/stable/c/16359bc02c093b0862e31739c07673340a2106a6
	https://git.kernel.org/stable/c/3a7a4aa3958ce0c4938a443d65001debe9a9af9c
	https://git.kernel.org/stable/c/8c4a7163b7f1495e3cc58bec7a4100de6612cde9
	https://git.kernel.org/stable/c/3048c6b84a51e4ba4a89385ed218d19a670edd47
	https://git.kernel.org/stable/c/05bb0167c80b8f93c6a4e0451b7da9b96db990c2
