From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2023-53531: null_blk: fix poll request timeout handling
Message-Id: <2025100136-CVE-2023-53531-3c7c@gregkh>
Content-Length: 3448
Lines: 96
X-Developer-Signature: v=1; a=openpgp-sha256; l=3545;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=dgcdinyVXuyNnFj6e2HyZ3uM3FdqtVJlV0Of6RFq7eI=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBl3RRJMfZ5Netpg//tC1/ZpG04lbBRnKjp7ROEHFx+74
 fz0rsj+jhgWBkEmBlkxRZYv23iO7q84pOhlaHsaZg4rE8gQBi5OAZiIjAzD9OLsb4+Ub4RM6by3
 SjlOQvdThGMew4IDnw/zTXHMcd4y78LMn1IyNa5zGl0A
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

null_blk: fix poll request timeout handling

When doing io_uring benchmark on /dev/nullb0, it's easy to crash the
kernel if poll requests timeout triggered, as reported by David. [1]

BUG: kernel NULL pointer dereference, address: 0000000000000008
Workqueue: kblockd blk_mq_timeout_work
RIP: 0010:null_timeout_rq+0x4e/0x91
Call Trace:
 ? null_timeout_rq+0x4e/0x91
 blk_mq_handle_expired+0x31/0x4b
 bt_iter+0x68/0x84
 ? bt_tags_iter+0x81/0x81
 __sbitmap_for_each_set.constprop.0+0xb0/0xf2
 ? __blk_mq_complete_request_remote+0xf/0xf
 bt_for_each+0x46/0x64
 ? __blk_mq_complete_request_remote+0xf/0xf
 ? percpu_ref_get_many+0xc/0x2a
 blk_mq_queue_tag_busy_iter+0x14d/0x18e
 blk_mq_timeout_work+0x95/0x127
 process_one_work+0x185/0x263
 worker_thread+0x1b5/0x227

This is indeed a race problem between null_timeout_rq() and null_poll().

null_poll()				null_timeout_rq()
  spin_lock(&nq->poll_lock)
  list_splice_init(&nq->poll_list, &list)
  spin_unlock(&nq->poll_lock)

  while (!list_empty(&list))
    req = list_first_entry()
    list_del_init()
    ...
    blk_mq_add_to_batch()
    // req->rq_next = NULL
					spin_lock(&nq->poll_lock)

					// rq->queuelist->next == NULL
					list_del_init(&rq->queuelist)

					spin_unlock(&nq->poll_lock)

Fix these problems by setting requests state to MQ_RQ_COMPLETE under
nq->poll_lock protection, in which null_timeout_rq() can safely detect
this race and early return.

Note this patch just fix the kernel panic when request timeout happen.

[1] https://lore.kernel.org/all/3893581.1691785261@warthog.procyon.org.uk/

The Linux kernel CVE team has assigned CVE-2023-53531 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.16 with commit 0a593fbbc245a85940ed34caa3aa1e4cb060c54b and fixed in 6.1.54 with commit a0b4a0666beacfe8add9c71d8922475541dbae73
	Issue introduced in 5.16 with commit 0a593fbbc245a85940ed34caa3aa1e4cb060c54b and fixed in 6.5.4 with commit a7cb2e709f2927cc3c76781df3e45de2381b3b9d
	Issue introduced in 5.16 with commit 0a593fbbc245a85940ed34caa3aa1e4cb060c54b and fixed in 6.6 with commit 5a26e45edb4690d58406178b5a9ea4c6dcf2c105

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2023-53531
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	drivers/block/null_blk/main.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/a0b4a0666beacfe8add9c71d8922475541dbae73
	https://git.kernel.org/stable/c/a7cb2e709f2927cc3c76781df3e45de2381b3b9d
	https://git.kernel.org/stable/c/5a26e45edb4690d58406178b5a9ea4c6dcf2c105
