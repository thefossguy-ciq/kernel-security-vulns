From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-39904: arm64: kexec: initialize kexec_buf struct in load_other_segments()
Message-Id: <2025100108-CVE-2025-39904-77a6@gregkh>
Content-Length: 3325
Lines: 86
X-Developer-Signature: v=1; a=openpgp-sha256; l=3412;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=r2SE9qfUGvtn1pZ2tfBQP0fZB5Efa7bdzbaJdw4FvWY=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBl37tR8vD25nzFtb7memcrH4vPC0San9KQT5Ll4C0IvK
 TX0JSl2xLIwCDIxyIopsnzZxnN0f8UhRS9D29Mwc1iZQIYwcHEKwEQkExjmislsd7k4zXByjeEO
 w70nDU+/VDvrx7BgopO1bfiKvL237nsozvmjsr5XZf5uAA==
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

arm64: kexec: initialize kexec_buf struct in load_other_segments()

Patch series "kexec: Fix invalid field access".

The kexec_buf structure was previously declared without initialization. 
commit bf454ec31add ("kexec_file: allow to place kexec_buf randomly")
added a field that is always read but not consistently populated by all
architectures.  This un-initialized field will contain garbage.

This is also triggering a UBSAN warning when the uninitialized data was
accessed:

	------------[ cut here ]------------
	UBSAN: invalid-load in ./include/linux/kexec.h:210:10
	load of value 252 is not a valid value for type '_Bool'

Zero-initializing kexec_buf at declaration ensures all fields are cleanly
set, preventing future instances of uninitialized memory being used.

An initial fix was already landed for arm64[0], and this patchset fixes
the problem on the remaining arm64 code and on riscv, as raised by Mark.

Discussions about this problem could be found at[1][2].


This patch (of 3):

The kexec_buf structure was previously declared without initialization.
commit bf454ec31add ("kexec_file: allow to place kexec_buf randomly")
added a field that is always read but not consistently populated by all
architectures. This un-initialized field will contain garbage.

This is also triggering a UBSAN warning when the uninitialized data was
accessed:

	------------[ cut here ]------------
	UBSAN: invalid-load in ./include/linux/kexec.h:210:10
	load of value 252 is not a valid value for type '_Bool'

Zero-initializing kexec_buf at declaration ensures all fields are
cleanly set, preventing future instances of uninitialized memory being
used.

The Linux kernel CVE team has assigned CVE-2025-39904 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 6.16 with commit bf454ec31add6790f6cdc88328e38901fcbbade6 and fixed in 6.16.8 with commit 340cc9a3bd30b25edaf6a9708d41b5f2c10a054a
	Issue introduced in 6.16 with commit bf454ec31add6790f6cdc88328e38901fcbbade6 and fixed in 6.17 with commit 04d3cd43700a2d0fe4bfb1012a8ec7f2e34a3507

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-39904
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	arch/arm64/kernel/machine_kexec_file.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/340cc9a3bd30b25edaf6a9708d41b5f2c10a054a
	https://git.kernel.org/stable/c/04d3cd43700a2d0fe4bfb1012a8ec7f2e34a3507
