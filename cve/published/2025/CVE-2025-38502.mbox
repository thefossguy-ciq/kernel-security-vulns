From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-38502: bpf: Fix oob access in cgroup local storage

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

bpf: Fix oob access in cgroup local storage

Lonial reported that an out-of-bounds access in cgroup local storage
can be crafted via tail calls. Given two programs each utilizing a
cgroup local storage with a different value size, and one program
doing a tail call into the other. The verifier will validate each of
the indivial programs just fine. However, in the runtime context
the bpf_cg_run_ctx holds an bpf_prog_array_item which contains the
BPF program as well as any cgroup local storage flavor the program
uses. Helpers such as bpf_get_local_storage() pick this up from the
runtime context:

  ctx = container_of(current->bpf_ctx, struct bpf_cg_run_ctx, run_ctx);
  storage = ctx->prog_item->cgroup_storage[stype];

  if (stype == BPF_CGROUP_STORAGE_SHARED)
    ptr = &READ_ONCE(storage->buf)->data[0];
  else
    ptr = this_cpu_ptr(storage->percpu_buf);

For the second program which was called from the originally attached
one, this means bpf_get_local_storage() will pick up the former
program's map, not its own. With mismatching sizes, this can result
in an unintended out-of-bounds access.

To fix this issue, we need to extend bpf_map_owner with an array of
storage_cookie[] to match on i) the exact maps from the original
program if the second program was using bpf_get_local_storage(), or
ii) allow the tail call combination if the second program was not
using any of the cgroup local storage maps.

The Linux kernel CVE team has assigned CVE-2025-38502 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.9 with commit 7d9c3427894fe70d1347b4820476bf37736d2ff0 and fixed in 5.15.192 with commit c1c74584b9b4043c52e41fec415226e582d266a3
	Issue introduced in 5.9 with commit 7d9c3427894fe70d1347b4820476bf37736d2ff0 and fixed in 6.1.151 with commit 66da7cee78590259b400e51a70622ccd41da7bb2
	Issue introduced in 5.9 with commit 7d9c3427894fe70d1347b4820476bf37736d2ff0 and fixed in 6.6.105 with commit 7acfa07c585e3d7a64654d38f0a5c762877d0b9b
	Issue introduced in 5.9 with commit 7d9c3427894fe70d1347b4820476bf37736d2ff0 and fixed in 6.12.46 with commit 41688d1fc5d163a6c2c0e95c0419e2cb31a44648
	Issue introduced in 5.9 with commit 7d9c3427894fe70d1347b4820476bf37736d2ff0 and fixed in 6.16.1 with commit 19341d5c59e8c7e8528e40f8663e99d67810473c
	Issue introduced in 5.9 with commit 7d9c3427894fe70d1347b4820476bf37736d2ff0 and fixed in 6.17 with commit abad3d0bad72a52137e0c350c59542d75ae4f513

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-38502
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	include/linux/bpf.h
	kernel/bpf/core.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/c1c74584b9b4043c52e41fec415226e582d266a3
	https://git.kernel.org/stable/c/66da7cee78590259b400e51a70622ccd41da7bb2
	https://git.kernel.org/stable/c/7acfa07c585e3d7a64654d38f0a5c762877d0b9b
	https://git.kernel.org/stable/c/41688d1fc5d163a6c2c0e95c0419e2cb31a44648
	https://git.kernel.org/stable/c/19341d5c59e8c7e8528e40f8663e99d67810473c
	https://git.kernel.org/stable/c/abad3d0bad72a52137e0c350c59542d75ae4f513
