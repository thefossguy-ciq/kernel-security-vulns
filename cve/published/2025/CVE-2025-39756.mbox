From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-39756: fs: Prevent file descriptor table allocations exceeding INT_MAX

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

fs: Prevent file descriptor table allocations exceeding INT_MAX

When sysctl_nr_open is set to a very high value (for example, 1073741816
as set by systemd), processes attempting to use file descriptors near
the limit can trigger massive memory allocation attempts that exceed
INT_MAX, resulting in a WARNING in mm/slub.c:

  WARNING: CPU: 0 PID: 44 at mm/slub.c:5027 __kvmalloc_node_noprof+0x21a/0x288

This happens because kvmalloc_array() and kvmalloc() check if the
requested size exceeds INT_MAX and emit a warning when the allocation is
not flagged with __GFP_NOWARN.

Specifically, when nr_open is set to 1073741816 (0x3ffffff8) and a
process calls dup2(oldfd, 1073741880), the kernel attempts to allocate:
- File descriptor array: 1073741880 * 8 bytes = 8,589,935,040 bytes
- Multiple bitmaps: ~400MB
- Total allocation size: > 8GB (exceeding INT_MAX = 2,147,483,647)

Reproducer:
1. Set /proc/sys/fs/nr_open to 1073741816:
   # echo 1073741816 > /proc/sys/fs/nr_open

2. Run a program that uses a high file descriptor:
   #include <unistd.h>
   #include <sys/resource.h>

   int main() {
       struct rlimit rlim = {1073741824, 1073741824};
       setrlimit(RLIMIT_NOFILE, &rlim);
       dup2(2, 1073741880);  // Triggers the warning
       return 0;
   }

3. Observe WARNING in dmesg at mm/slub.c:5027

systemd commit a8b627a introduced automatic bumping of fs.nr_open to the
maximum possible value. The rationale was that systems with memory
control groups (memcg) no longer need separate file descriptor limits
since memory is properly accounted. However, this change overlooked
that:

1. The kernel's allocation functions still enforce INT_MAX as a maximum
   size regardless of memcg accounting
2. Programs and tests that legitimately test file descriptor limits can
   inadvertently trigger massive allocations
3. The resulting allocations (>8GB) are impractical and will always fail

systemd's algorithm starts with INT_MAX and keeps halving the value
until the kernel accepts it. On most systems, this results in nr_open
being set to 1073741816 (0x3ffffff8), which is just under 1GB of file
descriptors.

While processes rarely use file descriptors near this limit in normal
operation, certain selftests (like
tools/testing/selftests/core/unshare_test.c) and programs that test file
descriptor limits can trigger this issue.

Fix this by adding a check in alloc_fdtable() to ensure the requested
allocation size does not exceed INT_MAX. This causes the operation to
fail with -EMFILE instead of triggering a kernel warning and avoids the
impractical >8GB memory allocation request.

The Linux kernel CVE team has assigned CVE-2025-39756 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 2.6.25 with commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b and fixed in 5.4.297 with commit b4159c5a90c03f8acd3de345a7f5fc63b0909818
	Issue introduced in 2.6.25 with commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b and fixed in 5.10.241 with commit f95638a8f22eba307dceddf5aef9ae2326bbcf98
	Issue introduced in 2.6.25 with commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b and fixed in 5.15.190 with commit 749528086620f8012b83ae032a80f6ffa80c45cd
	Issue introduced in 2.6.25 with commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b and fixed in 6.1.149 with commit 628fc28f42d979f36dbf75a6129ac7730e30c04e
	Issue introduced in 2.6.25 with commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b and fixed in 6.6.103 with commit 237e416eb62101f21b28c9e6e564d10efe1ecc6f
	Issue introduced in 2.6.25 with commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b and fixed in 6.12.43 with commit d4f9351243c17865a8cdbe6b3ccd09d0b13a7bcc
	Issue introduced in 2.6.25 with commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b and fixed in 6.15.11 with commit 9f61fa6a2a89a610120bc4e5d24379c667314b5c
	Issue introduced in 2.6.25 with commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b and fixed in 6.16.2 with commit dfd1f4ea98c3bd3a03d12169b5b2daa1f0a3e4ae
	Issue introduced in 2.6.25 with commit 9cfe015aa424b3c003baba3841a60dd9b5ad319b and fixed in 6.17 with commit 04a2c4b4511d186b0fce685da21085a5d4acd370

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-39756
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	fs/file.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/b4159c5a90c03f8acd3de345a7f5fc63b0909818
	https://git.kernel.org/stable/c/f95638a8f22eba307dceddf5aef9ae2326bbcf98
	https://git.kernel.org/stable/c/749528086620f8012b83ae032a80f6ffa80c45cd
	https://git.kernel.org/stable/c/628fc28f42d979f36dbf75a6129ac7730e30c04e
	https://git.kernel.org/stable/c/237e416eb62101f21b28c9e6e564d10efe1ecc6f
	https://git.kernel.org/stable/c/d4f9351243c17865a8cdbe6b3ccd09d0b13a7bcc
	https://git.kernel.org/stable/c/9f61fa6a2a89a610120bc4e5d24379c667314b5c
	https://git.kernel.org/stable/c/dfd1f4ea98c3bd3a03d12169b5b2daa1f0a3e4ae
	https://git.kernel.org/stable/c/04a2c4b4511d186b0fce685da21085a5d4acd370
