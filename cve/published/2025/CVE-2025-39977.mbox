From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-39977: futex: Prevent use-after-free during requeue-PI

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

futex: Prevent use-after-free during requeue-PI

syzbot managed to trigger the following race:

   T1                               T2

 futex_wait_requeue_pi()
   futex_do_wait()
     schedule()
                               futex_requeue()
                                 futex_proxy_trylock_atomic()
                                   futex_requeue_pi_prepare()
                                   requeue_pi_wake_futex()
                                     futex_requeue_pi_complete()
                                      /* preempt */

         * timeout/ signal wakes T1 *

   futex_requeue_pi_wakeup_sync() // Q_REQUEUE_PI_LOCKED
   futex_hash_put()
  // back to userland, on stack futex_q is garbage

                                      /* back */
                                     wake_up_state(q->task, TASK_NORMAL);

In this scenario futex_wait_requeue_pi() is able to leave without using
futex_q::lock_ptr for synchronization.

This can be prevented by reading futex_q::task before updating the
futex_q::requeue_state. A reference on the task_struct is not needed
because requeue_pi_wake_futex() is invoked with a spinlock_t held which
implies a RCU read section.

Even if T1 terminates immediately after, the task_struct will remain valid
during T2's wake_up_state().  A READ_ONCE on futex_q::task before
futex_requeue_pi_complete() is enough because it ensures that the variable
is read before the state is updated.

Read futex_q::task before updating the requeue state, use it for the
following wakeup.

The Linux kernel CVE team has assigned CVE-2025-39977 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.15 with commit 07d91ef510fb16a2e0ca7453222105835b7ba3b8 and fixed in 6.1.155 with commit cb5d19a61274b51b49601214a87af573b43d60fa
	Issue introduced in 5.15 with commit 07d91ef510fb16a2e0ca7453222105835b7ba3b8 and fixed in 6.6.109 with commit 348736955ed6ca6e99ca24b93b1d3fbfe352c181
	Issue introduced in 5.15 with commit 07d91ef510fb16a2e0ca7453222105835b7ba3b8 and fixed in 6.12.50 with commit a170b9c0dde83312b8b58ccc91509c7c15711641
	Issue introduced in 5.15 with commit 07d91ef510fb16a2e0ca7453222105835b7ba3b8 and fixed in 6.16.10 with commit d824b2dbdcfe3c390278dd9652ea526168ef6850
	Issue introduced in 5.15 with commit 07d91ef510fb16a2e0ca7453222105835b7ba3b8 and fixed in 6.17 with commit b549113738e8c751b613118032a724b772aa83f2

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-39977
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	kernel/futex/requeue.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/cb5d19a61274b51b49601214a87af573b43d60fa
	https://git.kernel.org/stable/c/348736955ed6ca6e99ca24b93b1d3fbfe352c181
	https://git.kernel.org/stable/c/a170b9c0dde83312b8b58ccc91509c7c15711641
	https://git.kernel.org/stable/c/d824b2dbdcfe3c390278dd9652ea526168ef6850
	https://git.kernel.org/stable/c/b549113738e8c751b613118032a724b772aa83f2
