From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-38525: rxrpc: Fix irq-disabled in local_bh_enable()
Message-Id: <2025081653-CVE-2025-38525-f516@gregkh>
Content-Length: 3319
Lines: 88
X-Developer-Signature: v=1; a=openpgp-sha256; l=3408;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=KWUQ6Cd7f2RvRpmpECxPQ1L/f5Pv32/Dwi2rgZfrIdA=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBkL0j82+xSKmtY9ct8oKLr7/Ertj7/XFq+ZFVoxM3nO5
 bgL04tFOmJZGASZGGTFFFm+bOM5ur/ikKKXoe1pmDmsTCBDGLg4BWAiEqsZFkxkWLXAfnGA7c9u
 rUlPO+fO9rHbXM2w4GL0D6Yr0hG+e4Myq3/5+1ZV+7+pBwA=
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

rxrpc: Fix irq-disabled in local_bh_enable()

The rxrpc_assess_MTU_size() function calls down into the IP layer to find
out the MTU size for a route.  When accepting an incoming call, this is
called from rxrpc_new_incoming_call() which holds interrupts disabled
across the code that calls down to it.  Unfortunately, the IP layer uses
local_bh_enable() which, config dependent, throws a warning if IRQs are
enabled:

WARNING: CPU: 1 PID: 5544 at kernel/softirq.c:387 __local_bh_enable_ip+0x43/0xd0
...
RIP: 0010:__local_bh_enable_ip+0x43/0xd0
...
Call Trace:
 <TASK>
 rt_cache_route+0x7e/0xa0
 rt_set_nexthop.isra.0+0x3b3/0x3f0
 __mkroute_output+0x43a/0x460
 ip_route_output_key_hash+0xf7/0x140
 ip_route_output_flow+0x1b/0x90
 rxrpc_assess_MTU_size.isra.0+0x2a0/0x590
 rxrpc_new_incoming_peer+0x46/0x120
 rxrpc_alloc_incoming_call+0x1b1/0x400
 rxrpc_new_incoming_call+0x1da/0x5e0
 rxrpc_input_packet+0x827/0x900
 rxrpc_io_thread+0x403/0xb60
 kthread+0x2f7/0x310
 ret_from_fork+0x2a/0x230
 ret_from_fork_asm+0x1a/0x30
...
hardirqs last  enabled at (23): _raw_spin_unlock_irq+0x24/0x50
hardirqs last disabled at (24): _raw_read_lock_irq+0x17/0x70
softirqs last  enabled at (0): copy_process+0xc61/0x2730
softirqs last disabled at (25): rt_add_uncached_list+0x3c/0x90

Fix this by moving the call to rxrpc_assess_MTU_size() out of
rxrpc_init_peer() and further up the stack where it can be done without
interrupts disabled.

It shouldn't be a problem for rxrpc_new_incoming_call() to do it after the
locks are dropped as pmtud is going to be performed by the I/O thread - and
we're in the I/O thread at this point.

The Linux kernel CVE team has assigned CVE-2025-38525 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 6.14 with commit a2ea9a9072607c2fd6442bd1ffb4dbdbf882aed7 and fixed in 6.15.8 with commit 2029f21f10dedb88c0f86abffcf8d6c21dcf6040
	Issue introduced in 6.14 with commit a2ea9a9072607c2fd6442bd1ffb4dbdbf882aed7 and fixed in 6.16 with commit e4d2878369d590bf8455e3678a644e503172eafa

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-38525
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	net/rxrpc/ar-internal.h
	net/rxrpc/call_accept.c
	net/rxrpc/peer_object.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/2029f21f10dedb88c0f86abffcf8d6c21dcf6040
	https://git.kernel.org/stable/c/e4d2878369d590bf8455e3678a644e503172eafa
