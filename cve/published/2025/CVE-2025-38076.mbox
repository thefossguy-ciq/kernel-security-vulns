From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-38076: alloc_tag: allocate percpu counters for module tags dynamically
Message-Id: <2025061840-CVE-2025-38076-359d@gregkh>
Content-Length: 2499
Lines: 61
X-Developer-Signature: v=1; a=openpgp-sha256; l=2561;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=MxoJwKapv++WiTuAq5KGRq1DKFOq3bJCmGKKCgHLONY=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBlB7V+qKi4x5Xf/exZ5aHXg5s+T/7nnuy3jOarKZlNfb
 bNmms62jlgWBkEmBlkxRZYv23iO7q84pOhlaHsaZg4rE8gQBi5OAZgI/yuG+WESArd9d/fppvy6
 p7PsR8PPxncpPQzzs3/FrOKvSwj9umvlafZXyox2tRfsAA==
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

alloc_tag: allocate percpu counters for module tags dynamically

When a module gets unloaded it checks whether any of its tags are still in
use and if so, we keep the memory containing module's allocation tags
alive until all tags are unused.  However percpu counters referenced by
the tags are freed by free_module().  This will lead to UAF if the memory
allocated by a module is accessed after module was unloaded.

To fix this we allocate percpu counters for module allocation tags
dynamically and we keep it alive for tags which are still in use after
module unloading.  This also removes the requirement of a larger
PERCPU_MODULE_RESERVE when memory allocation profiling is enabled because
percpu memory for counters does not need to be reserved anymore.

The Linux kernel CVE team has assigned CVE-2025-38076 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 6.13 with commit 0db6f8d7820a4b788565dac8eed52bfc2c3216da and fixed in 6.14.9 with commit 3cc733e6d96c938d2b82be96858a0ab900eb6fdc
	Issue introduced in 6.13 with commit 0db6f8d7820a4b788565dac8eed52bfc2c3216da and fixed in 6.15 with commit 12ca42c237756182aad8ab04654c952765cb9061

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-38076
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	include/linux/alloc_tag.h
	include/linux/codetag.h
	include/linux/percpu.h
	lib/alloc_tag.c
	lib/codetag.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/3cc733e6d96c938d2b82be96858a0ab900eb6fdc
	https://git.kernel.org/stable/c/12ca42c237756182aad8ab04654c952765cb9061
