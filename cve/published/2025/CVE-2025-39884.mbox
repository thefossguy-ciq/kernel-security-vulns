From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-39884: btrfs: fix subvolume deletion lockup caused by inodes xarray race
Message-Id: <2025092302-CVE-2025-39884-1503@gregkh>
Content-Length: 3491
Lines: 80
X-Developer-Signature: v=1; a=openpgp-sha256; l=3572;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=X6EvIPo6EOQ3h4tSVf0wfj1/MKxahZjCkTyoGM8pmsY=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBmXzOed/XMgcXl70xSnafKzHyj+DJa+yLo45m3AQftuL
 7/lr3f5d8SyMAgyMciKKbJ82cZzdH/FIUUvQ9vTMHNYmUCGMHBxCsBEKroYFix643dd8Kii/dHU
 J5PuC9pNNbx6wYVhfubOKZ43793+lGF78VvU/1NvHJO6TwAA
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

btrfs: fix subvolume deletion lockup caused by inodes xarray race

There is a race condition between inode eviction and inode caching that
can cause a live struct btrfs_inode to be missing from the root->inodes
xarray. Specifically, there is a window during evict() between the inode
being unhashed and deleted from the xarray. If btrfs_iget() is called
for the same inode in that window, it will be recreated and inserted
into the xarray, but then eviction will delete the new entry, leaving
nothing in the xarray:

Thread 1                          Thread 2
---------------------------------------------------------------
evict()
  remove_inode_hash()
                                  btrfs_iget_path()
                                    btrfs_iget_locked()
                                    btrfs_read_locked_inode()
                                      btrfs_add_inode_to_root()
  destroy_inode()
    btrfs_destroy_inode()
      btrfs_del_inode_from_root()
        __xa_erase

In turn, this can cause issues for subvolume deletion. Specifically, if
an inode is in this lost state, and all other inodes are evicted, then
btrfs_del_inode_from_root() will call btrfs_add_dead_root() prematurely.
If the lost inode has a delayed_node attached to it, then when
btrfs_clean_one_deleted_snapshot() calls btrfs_kill_all_delayed_nodes(),
it will loop forever because the delayed_nodes xarray will never become
empty (unless memory pressure forces the inode out). We saw this
manifest as soft lockups in production.

Fix it by only deleting the xarray entry if it matches the given inode
(using __xa_cmpxchg()).

The Linux kernel CVE team has assigned CVE-2025-39884 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 6.11 with commit 310b2f5d5a9451b708ab1d3385c3b0998084904c and fixed in 6.12.48 with commit 9ba898c9fcbe6ebb88bcd4df8aab0f90090d202e
	Issue introduced in 6.11 with commit 310b2f5d5a9451b708ab1d3385c3b0998084904c and fixed in 6.16.8 with commit f1498abaf74f8d7b1e7001f16ed77818d8ae6a59
	Issue introduced in 6.11 with commit 310b2f5d5a9451b708ab1d3385c3b0998084904c and fixed in 6.17-rc6 with commit f6a6c280059c4ddc23e12e3de1b01098e240036f

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-39884
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	fs/btrfs/inode.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/9ba898c9fcbe6ebb88bcd4df8aab0f90090d202e
	https://git.kernel.org/stable/c/f1498abaf74f8d7b1e7001f16ed77818d8ae6a59
	https://git.kernel.org/stable/c/f6a6c280059c4ddc23e12e3de1b01098e240036f
