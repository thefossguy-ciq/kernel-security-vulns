From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-39744: rcu: Fix rcu_read_unlock() deadloop due to IRQ work
Message-Id: <2025091140-CVE-2025-39744-2744@gregkh>
Content-Length: 3190
Lines: 86
X-Developer-Signature: v=1; a=openpgp-sha256; l=3277;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=8jRURuVCgqY8b9y6DYhY1hzH2h8/UoNsW+ztR2dQkgk=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBmH/kU8nvCyY/WvQF72J7G/mqYKT7mj6WdbIf7ync5jh
 Z7QTwz6HbEsDIJMDLJiiixftvEc3V9xSNHL0PY0zBxWJpAhDFycAjCRe9EMC5oPv/K+cK5qx+2r
 TFMdtzot8vPoCGdYsMpo9+WaCb+CeG2V7a7e7DVvnrP2MgA=
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

rcu: Fix rcu_read_unlock() deadloop due to IRQ work

During rcu_read_unlock_special(), if this happens during irq_exit(), we
can lockup if an IPI is issued. This is because the IPI itself triggers
the irq_exit() path causing a recursive lock up.

This is precisely what Xiongfeng found when invoking a BPF program on
the trace_tick_stop() tracepoint As shown in the trace below. Fix by
managing the irq_work state correctly.

irq_exit()
  __irq_exit_rcu()
    /* in_hardirq() returns false after this */
    preempt_count_sub(HARDIRQ_OFFSET)
    tick_irq_exit()
      tick_nohz_irq_exit()
	    tick_nohz_stop_sched_tick()
	      trace_tick_stop()  /* a bpf prog is hooked on this trace point */
		   __bpf_trace_tick_stop()
		      bpf_trace_run2()
			    rcu_read_unlock_special()
                              /* will send a IPI to itself */
			      irq_work_queue_on(&rdp->defer_qs_iw, rdp->cpu);

A simple reproducer can also be obtained by doing the following in
tick_irq_exit(). It will hang on boot without the patch:

  static inline void tick_irq_exit(void)
  {
 +	rcu_read_lock();
 +	WRITE_ONCE(current->rcu_read_unlock_special.b.need_qs, true);
 +	rcu_read_unlock();
 +

[neeraj: Apply Frederic's suggested fix for PREEMPT_RT]

The Linux kernel CVE team has assigned CVE-2025-39744 to this issue.


Affected and fixed versions
===========================

	Fixed in 6.6.103 with commit e7a375453cca2b8a0d2fa1b82b913f3fed7c0507
	Fixed in 6.12.43 with commit 1cfa244f7198d325594e627574930b7b91df5bfe
	Fixed in 6.15.11 with commit ddebb2a7677673cf4438a04e1a48b8ed6b0c8e9a
	Fixed in 6.16.2 with commit 56c5ef194f4509df63fc0f7a91ea5973ce479b1e
	Fixed in 6.17-rc1 with commit b41642c87716bbd09797b1e4ea7d904f06c39b7b

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-39744
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	kernel/rcu/tree.h
	kernel/rcu/tree_plugin.h


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/e7a375453cca2b8a0d2fa1b82b913f3fed7c0507
	https://git.kernel.org/stable/c/1cfa244f7198d325594e627574930b7b91df5bfe
	https://git.kernel.org/stable/c/ddebb2a7677673cf4438a04e1a48b8ed6b0c8e9a
	https://git.kernel.org/stable/c/56c5ef194f4509df63fc0f7a91ea5973ce479b1e
	https://git.kernel.org/stable/c/b41642c87716bbd09797b1e4ea7d904f06c39b7b
