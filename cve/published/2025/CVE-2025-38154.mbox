From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-38154: bpf, sockmap: Avoid using sk_socket after free when sending
Message-Id: <2025070337-CVE-2025-38154-8353@gregkh>
Content-Length: 4965
Lines: 130
X-Developer-Signature: v=1; a=openpgp-sha256; l=5096;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=MPhWiVHjrZJNRcxoIbBxmC4D1aK66sK6X2qG1ndv0jI=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBlpDjePy20wWup8vFrywsydYbwlbk6cPDuWX164SKV3h
 0r6+ldfO2JZGASZGGTFFFm+bOM5ur/ikKKXoe1pmDmsTCBDGLg4BWAi3k0McwWDDy1byMm8Ny9U
 wzbpZPvG9mK/lQzzQ2K33Vgh3/gk4vahOCPW44K8u47/BgA=
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

bpf, sockmap: Avoid using sk_socket after free when sending

The sk->sk_socket is not locked or referenced in backlog thread, and
during the call to skb_send_sock(), there is a race condition with
the release of sk_socket. All types of sockets(tcp/udp/unix/vsock)
will be affected.

Race conditions:
'''
CPU0                               CPU1

backlog::skb_send_sock
  sendmsg_unlocked
    sock_sendmsg
      sock_sendmsg_nosec
                                   close(fd):
                                     ...
                                     ops->release() -> sock_map_close()
                                     sk_socket->ops = NULL
                                     free(socket)
      sock->ops->sendmsg
            ^
            panic here
'''

The ref of psock become 0 after sock_map_close() executed.
'''
void sock_map_close()
{
    ...
    if (likely(psock)) {
    ...
    // !! here we remove psock and the ref of psock become 0
    sock_map_remove_links(sk, psock)
    psock = sk_psock_get(sk);
    if (unlikely(!psock))
        goto no_psock; <=== Control jumps here via goto
        ...
        cancel_delayed_work_sync(&psock->work); <=== not executed
        sk_psock_put(sk, psock);
        ...
}
'''

Based on the fact that we already wait for the workqueue to finish in
sock_map_close() if psock is held, we simply increase the psock
reference count to avoid race conditions.

With this patch, if the backlog thread is running, sock_map_close() will
wait for the backlog thread to complete and cancel all pending work.

If no backlog running, any pending work that hasn't started by then will
fail when invoked by sk_psock_get(), as the psock reference count have
been zeroed, and sk_psock_drop() will cancel all jobs via
cancel_delayed_work_sync().

In summary, we require synchronization to coordinate the backlog thread
and close() thread.

The panic I catched:
'''
Workqueue: events sk_psock_backlog
RIP: 0010:sock_sendmsg+0x21d/0x440
RAX: 0000000000000000 RBX: ffffc9000521fad8 RCX: 0000000000000001
...
Call Trace:
 <TASK>
 ? die_addr+0x40/0xa0
 ? exc_general_protection+0x14c/0x230
 ? asm_exc_general_protection+0x26/0x30
 ? sock_sendmsg+0x21d/0x440
 ? sock_sendmsg+0x3e0/0x440
 ? __pfx_sock_sendmsg+0x10/0x10
 __skb_send_sock+0x543/0xb70
 sk_psock_backlog+0x247/0xb80
...
'''

The Linux kernel CVE team has assigned CVE-2025-38154 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.15.162 with commit 4959ffc65a0e94f8acaac20deac49f89e6ded52d and fixed in 5.15.186 with commit 4edb40b05cb6a261775abfd8046804ca139a5546
	Issue introduced in 6.1.95 with commit 5eabdf17fed2ad41b836bb4055ec36d95e512c50 and fixed in 6.1.142 with commit b19cbf0b9a91f5a0d93fbcd761ff71c48ab40ed9
	Issue introduced in 6.6.35 with commit e946428439a0d2079959f5603256ac51b6047017 and fixed in 6.6.94 with commit 4c6fa65ab2aec7df94809478c8d28ef38676a1b7
	Issue introduced in 6.10 with commit 4b4647add7d3c8530493f7247d11e257ee425bf0 and fixed in 6.12.34 with commit 15c0250dae3b48a398447d2b364603821ed4ed90
	Issue introduced in 6.10 with commit 4b4647add7d3c8530493f7247d11e257ee425bf0 and fixed in 6.15.3 with commit 7c0a16f6ea2b1c82a03bccd5d1bdb4a7bbd4d987
	Issue introduced in 6.10 with commit 4b4647add7d3c8530493f7247d11e257ee425bf0 and fixed in 6.16-rc1 with commit 8259eb0e06d8f64c700f5fbdb28a5c18e10de291
	Issue introduced in 6.9.6 with commit 3627605de498639a3c586c8684d12c89cba11073

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-38154
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	net/core/skmsg.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/4edb40b05cb6a261775abfd8046804ca139a5546
	https://git.kernel.org/stable/c/b19cbf0b9a91f5a0d93fbcd761ff71c48ab40ed9
	https://git.kernel.org/stable/c/4c6fa65ab2aec7df94809478c8d28ef38676a1b7
	https://git.kernel.org/stable/c/15c0250dae3b48a398447d2b364603821ed4ed90
	https://git.kernel.org/stable/c/7c0a16f6ea2b1c82a03bccd5d1bdb4a7bbd4d987
	https://git.kernel.org/stable/c/8259eb0e06d8f64c700f5fbdb28a5c18e10de291
