From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-39905: net: phylink: add lock for serializing concurrent pl->phydev writes with resolver
Message-Id: <2025100108-CVE-2025-39905-157f@gregkh>
Content-Length: 2740
Lines: 68
X-Developer-Signature: v=1; a=openpgp-sha256; l=2809;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=l9C9IJ6kSiRfDUPQwpO1bxYa71r/L2cJ3Tw32CEP0k0=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBl37tRsTUjc8WOR1zdhBr+KGxWKXwXDXV88LHG4KHf/2
 8EsfdG2jlgWBkEmBlkxRZYv23iO7q84pOhlaHsaZg4rE8gQBi5OAZjIqgiGeTb6NtOX9E8v40ye
 zuU1/T6/4BXGBIYFV473ifVK5kz5yKZpYyQyZ0XkyS4OAA==
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

net: phylink: add lock for serializing concurrent pl->phydev writes with resolver

Currently phylink_resolve() protects itself against concurrent
phylink_bringup_phy() or phylink_disconnect_phy() calls which modify
pl->phydev by relying on pl->state_mutex.

The problem is that in phylink_resolve(), pl->state_mutex is in a lock
inversion state with pl->phydev->lock. So pl->phydev->lock needs to be
acquired prior to pl->state_mutex. But that requires dereferencing
pl->phydev in the first place, and without pl->state_mutex, that is
racy.

Hence the reason for the extra lock. Currently it is redundant, but it
will serve a functional purpose once mutex_lock(&phy->lock) will be
moved outside of the mutex_lock(&pl->state_mutex) section.

Another alternative considered would have been to let phylink_resolve()
acquire the rtnl_mutex, which is also held when phylink_bringup_phy()
and phylink_disconnect_phy() are called. But since phylink_disconnect_phy()
runs under rtnl_lock(), it would deadlock with phylink_resolve() when
calling flush_work(&pl->resolve). Additionally, it would have been
undesirable because it would have unnecessarily blocked many other call
paths as well in the entire kernel, so the smaller-scoped lock was
preferred.

The Linux kernel CVE team has assigned CVE-2025-39905 to this issue.


Affected and fixed versions
===========================

	Fixed in 6.16.8 with commit 56fe63b05ec84ae6674269d78397cec43a7a295a
	Fixed in 6.17 with commit 0ba5b2f2c381dbec9ed9e4ab3ae5d3e667de0dc3

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-39905
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	drivers/net/phy/phylink.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/56fe63b05ec84ae6674269d78397cec43a7a295a
	https://git.kernel.org/stable/c/0ba5b2f2c381dbec9ed9e4ab3ae5d3e667de0dc3
