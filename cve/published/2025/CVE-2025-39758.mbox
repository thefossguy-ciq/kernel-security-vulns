From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-39758: RDMA/siw: Fix the sendmsg byte count in siw_tcp_sendpages
Message-Id: <2025091144-CVE-2025-39758-eaf0@gregkh>
Content-Length: 4373
Lines: 100
X-Developer-Signature: v=1; a=openpgp-sha256; l=4474;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=jhSNUBsLHycXcz5V4xdr0V2qVKSPiiuCE5pW7q3y7hA=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBmH/sWWVzTJK5/bUNrwMmn5o61e/dPEcu7ffWtnNGths
 /9LFVbmjlgWBkEmBlkxRZYv23iO7q84pOhlaHsaZg4rE8gQBi5OAZjIBzWG+RH5LVpC+Yd19Gee
 mb5y44c54X7SeQzzI3/39jXp7lZh6iuW//jxw/dLSkt4AA==
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

RDMA/siw: Fix the sendmsg byte count in siw_tcp_sendpages

Ever since commit c2ff29e99a76 ("siw: Inline do_tcp_sendpages()"),
we have been doing this:

static int siw_tcp_sendpages(struct socket *s, struct page **page, int offset,
                             size_t size)
[...]
        /* Calculate the number of bytes we need to push, for this page
         * specifically */
        size_t bytes = min_t(size_t, PAGE_SIZE - offset, size);
        /* If we can't splice it, then copy it in, as normal */
        if (!sendpage_ok(page[i]))
                msg.msg_flags &= ~MSG_SPLICE_PAGES;
        /* Set the bvec pointing to the page, with len $bytes */
        bvec_set_page(&bvec, page[i], bytes, offset);
        /* Set the iter to $size, aka the size of the whole sendpages (!!!) */
        iov_iter_bvec(&msg.msg_iter, ITER_SOURCE, &bvec, 1, size);
try_page_again:
        lock_sock(sk);
        /* Sendmsg with $size size (!!!) */
        rv = tcp_sendmsg_locked(sk, &msg, size);

This means we've been sending oversized iov_iters and tcp_sendmsg calls
for a while. This has a been a benign bug because sendpage_ok() always
returned true. With the recent slab allocator changes being slowly
introduced into next (that disallow sendpage on large kmalloc
allocations), we have recently hit out-of-bounds crashes, due to slight
differences in iov_iter behavior between the MSG_SPLICE_PAGES and
"regular" copy paths:

(MSG_SPLICE_PAGES)
skb_splice_from_iter
  iov_iter_extract_pages
    iov_iter_extract_bvec_pages
      uses i->nr_segs to correctly stop in its tracks before OoB'ing everywhere
  skb_splice_from_iter gets a "short" read

(!MSG_SPLICE_PAGES)
skb_copy_to_page_nocache copy=iov_iter_count
 [...]
   copy_from_iter
        /* this doesn't help */
        if (unlikely(iter->count < len))
                len = iter->count;
          iterate_bvec
            ... and we run off the bvecs

Fix this by properly setting the iov_iter's byte count, plus sending the
correct byte count to tcp_sendmsg_locked.

The Linux kernel CVE team has assigned CVE-2025-39758 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 6.5 with commit c2ff29e99a764769eb2ce3a1a5585013633ee9a6 and fixed in 6.6.103 with commit 5661fdd218c2799001b88c17acd19f4395e4488e
	Issue introduced in 6.5 with commit c2ff29e99a764769eb2ce3a1a5585013633ee9a6 and fixed in 6.12.43 with commit 673cf582fd788af12cdacfb62a6a593083542481
	Issue introduced in 6.5 with commit c2ff29e99a764769eb2ce3a1a5585013633ee9a6 and fixed in 6.15.11 with commit 42ebc16d9d2563f1a1ce0f05b643ee68d54fabf8
	Issue introduced in 6.5 with commit c2ff29e99a764769eb2ce3a1a5585013633ee9a6 and fixed in 6.16.2 with commit edf82bc8150570167a33a7d54627d66614cbf841
	Issue introduced in 6.5 with commit c2ff29e99a764769eb2ce3a1a5585013633ee9a6 and fixed in 6.17-rc1 with commit c18646248fed07683d4cee8a8af933fc4fe83c0d

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-39758
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	drivers/infiniband/sw/siw/siw_qp_tx.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/5661fdd218c2799001b88c17acd19f4395e4488e
	https://git.kernel.org/stable/c/673cf582fd788af12cdacfb62a6a593083542481
	https://git.kernel.org/stable/c/42ebc16d9d2563f1a1ce0f05b643ee68d54fabf8
	https://git.kernel.org/stable/c/edf82bc8150570167a33a7d54627d66614cbf841
	https://git.kernel.org/stable/c/c18646248fed07683d4cee8a8af933fc4fe83c0d
