From bippy-c9c4e1df01b2 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2024-43869: perf: Fix event leak upon exec and file release
Message-Id: <2024082133-CVE-2024-43869-26aa@gregkh>
Content-Length: 3623
Lines: 94
X-Developer-Signature: v=1; a=openpgp-sha256; l=3718;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=WCRbaBRnCbZY3KPWnK0TIoJhpXQWPa0O812qd+SIRYc=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDGlH9Y9e52VcJ2vw5Wxea+K9bX+17xnI23RUR2sytv/iP
 eEjacjREcvCIMjEICumyPJlG8/R/RWHFL0MbU/DzGFlAhnCwMUpABNRrmaYK7fEXFfLSeViwRKj
 N6ufTCv1YXpRxTBX8sMZy4NLfr8LFSopTMrS6s7dnfwDAA==
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

perf: Fix event leak upon exec and file release

The perf pending task work is never waited upon the matching event
release. In the case of a child event, released via free_event()
directly, this can potentially result in a leaked event, such as in the
following scenario that doesn't even require a weak IRQ work
implementation to trigger:

schedule()
   prepare_task_switch()
=======> <NMI>
      perf_event_overflow()
         event->pending_sigtrap = ...
         irq_work_queue(&event->pending_irq)
<======= </NMI>
      perf_event_task_sched_out()
          event_sched_out()
              event->pending_sigtrap = 0;
              atomic_long_inc_not_zero(&event->refcount)
              task_work_add(&event->pending_task)
   finish_lock_switch()
=======> <IRQ>
   perf_pending_irq()
      //do nothing, rely on pending task work
<======= </IRQ>

begin_new_exec()
   perf_event_exit_task()
      perf_event_exit_event()
         // If is child event
         free_event()
            WARN(atomic_long_cmpxchg(&event->refcount, 1, 0) != 1)
            // event is leaked

Similar scenarios can also happen with perf_event_remove_on_exec() or
simply against concurrent perf_event_release().

Fix this with synchonizing against the possibly remaining pending task
work while freeing the event, just like is done with remaining pending
IRQ work. This means that the pending task callback neither need nor
should hold a reference to the event, preventing it from ever beeing
freed.

The Linux kernel CVE team has assigned CVE-2024-43869 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.15.84 with commit 8bffa95ac19f and fixed in 5.15.165 with commit 9ad46f1fef42
	Issue introduced in 6.1 with commit 517e6a301f34 and fixed in 6.1.103 with commit ed2c202dac55
	Issue introduced in 6.1 with commit 517e6a301f34 and fixed in 6.6.44 with commit 104e258a0040
	Issue introduced in 6.1 with commit 517e6a301f34 and fixed in 6.10.3 with commit f34d8307a73a
	Issue introduced in 6.1 with commit 517e6a301f34 and fixed in 6.11-rc1 with commit 3a5465418f5f
	Issue introduced in 6.0.14 with commit 78e1317a174e

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2024-43869
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	include/linux/perf_event.h
	kernel/events/core.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/9ad46f1fef421d43cdab3a7d1744b2f43b54dae0
	https://git.kernel.org/stable/c/ed2c202dac55423a52d7e2290f2888bf08b8ee99
	https://git.kernel.org/stable/c/104e258a004037bc7dba9f6085c71dad6af57ad4
	https://git.kernel.org/stable/c/f34d8307a73a18de5320fcc6f40403146d061891
	https://git.kernel.org/stable/c/3a5465418f5fd970e86a86c7f4075be262682840
