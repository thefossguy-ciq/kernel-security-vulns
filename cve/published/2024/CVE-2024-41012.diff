--- a/CVE-2024-41012.mbox	2024-07-23 09:58:36.399050018 +0200
+++ b/CVE-2024-41012.mbox	2024-07-23 09:58:54.218529018 +0200
@@ -6,15 +6,13 @@
 do_lock_file_wait().
 However, LSMs can allow the first do_lock_file_wait() that created the lock
 while denying the second do_lock_file_wait() that tries to remove the lock.
-In theory (but AFAIK not in practice), posix_lock_file() could also fail to
+Separately, posix_lock_file() could also fail to
 remove a lock due to GFP_KERNEL allocation failure (when splitting a range
 in the middle).
 
 After the bug has been triggered, use-after-free reads will occur in
 lock_get_status() when userspace reads /proc/locks. This can likely be used
 to read arbitrary kernel memory, but can't corrupt kernel memory.
-This only affects systems with SELinux / Smack / AppArmor / BPF-LSM in
-enforcing mode and only works from some security contexts.
 
 Fix it by calling locks_remove_posix() instead, which is designed to
 reliably get rid of POSIX locks associated with the given file and
