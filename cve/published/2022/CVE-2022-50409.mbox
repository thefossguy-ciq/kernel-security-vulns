From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2022-50409: net: If sock is dead don't access sock's sk_wq in sk_stream_wait_memory
Message-Id: <2025091853-CVE-2022-50409-d7dc@gregkh>
Content-Length: 5370
Lines: 126
X-Developer-Signature: v=1; a=openpgp-sha256; l=5497;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=Qw+3a6ISXszkazCzhXLQenrs8oowa14lIJbQUmX1pF8=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBlndDNb7oU6vt6gnfdx9ftYpQBr70e1KSuClu2fcHiDj
 0z5wtPFHbEsDIJMDLJiiixftvEc3V9xSNHL0PY0zBxWJpAhDFycAjCRU88Z5lfEFr56JzM/6s+W
 mByZfypyhoJr9zIs2CmykO/YUgG3rhsy07XfMTnuaD6/HwA=
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

net: If sock is dead don't access sock's sk_wq in sk_stream_wait_memory

Fixes the below NULL pointer dereference:

  [...]
  [   14.471200] Call Trace:
  [   14.471562]  <TASK>
  [   14.471882]  lock_acquire+0x245/0x2e0
  [   14.472416]  ? remove_wait_queue+0x12/0x50
  [   14.473014]  ? _raw_spin_lock_irqsave+0x17/0x50
  [   14.473681]  _raw_spin_lock_irqsave+0x3d/0x50
  [   14.474318]  ? remove_wait_queue+0x12/0x50
  [   14.474907]  remove_wait_queue+0x12/0x50
  [   14.475480]  sk_stream_wait_memory+0x20d/0x340
  [   14.476127]  ? do_wait_intr_irq+0x80/0x80
  [   14.476704]  do_tcp_sendpages+0x287/0x600
  [   14.477283]  tcp_bpf_push+0xab/0x260
  [   14.477817]  tcp_bpf_sendmsg_redir+0x297/0x500
  [   14.478461]  ? __local_bh_enable_ip+0x77/0xe0
  [   14.479096]  tcp_bpf_send_verdict+0x105/0x470
  [   14.479729]  tcp_bpf_sendmsg+0x318/0x4f0
  [   14.480311]  sock_sendmsg+0x2d/0x40
  [   14.480822]  ____sys_sendmsg+0x1b4/0x1c0
  [   14.481390]  ? copy_msghdr_from_user+0x62/0x80
  [   14.482048]  ___sys_sendmsg+0x78/0xb0
  [   14.482580]  ? vmf_insert_pfn_prot+0x91/0x150
  [   14.483215]  ? __do_fault+0x2a/0x1a0
  [   14.483738]  ? do_fault+0x15e/0x5d0
  [   14.484246]  ? __handle_mm_fault+0x56b/0x1040
  [   14.484874]  ? lock_is_held_type+0xdf/0x130
  [   14.485474]  ? find_held_lock+0x2d/0x90
  [   14.486046]  ? __sys_sendmsg+0x41/0x70
  [   14.486587]  __sys_sendmsg+0x41/0x70
  [   14.487105]  ? intel_pmu_drain_pebs_core+0x350/0x350
  [   14.487822]  do_syscall_64+0x34/0x80
  [   14.488345]  entry_SYSCALL_64_after_hwframe+0x63/0xcd
  [...]

The test scenario has the following flow:

thread1                               thread2
-----------                           ---------------
 tcp_bpf_sendmsg
  tcp_bpf_send_verdict
   tcp_bpf_sendmsg_redir              sock_close
    tcp_bpf_push_locked                 __sock_release
     tcp_bpf_push                         //inet_release
      do_tcp_sendpages                    sock->ops->release
       sk_stream_wait_memory          	   // tcp_close
          sk_wait_event                      sk->sk_prot->close
           release_sock(__sk);
            ***
                                                lock_sock(sk);
                                                  __tcp_close
                                                    sock_orphan(sk)
                                                      sk->sk_wq  = NULL
                                                release_sock
            ****
           lock_sock(__sk);
          remove_wait_queue(sk_sleep(sk), &wait);
             sk_sleep(sk)
             //NULL pointer dereference
             &rcu_dereference_raw(sk->sk_wq)->wait

While waiting for memory in thread1, the socket is released with its wait
queue because thread2 has closed it. This caused by tcp_bpf_send_verdict
didn't increase the f_count of psock->sk_redir->sk_socket->file in thread1.

We should check if SOCK_DEAD flag is set on wakeup in sk_stream_wait_memory
before accessing the wait queue.

The Linux kernel CVE team has assigned CVE-2022-50409 to this issue.


Affected and fixed versions
===========================

	Fixed in 4.14.296 with commit 1f48ab20b80f39c0d85119243109d02946fde6d5
	Fixed in 4.19.262 with commit 5fe03917bb017d9af68a95f989f1c122eebc69a6
	Fixed in 5.4.220 with commit a76462dbdd8bddcbeec9463bc9e54e509b860762
	Fixed in 5.10.150 with commit 65029aaedd15d9fe5ea1a899134e236d83f627bb
	Fixed in 5.15.75 with commit 124b7c773271f06af5a2cea694b283cdb5275cf5
	Fixed in 5.19.17 with commit 35f5e70bdfa7432762ac4ffa75e5a7574ac5563e
	Fixed in 6.0.3 with commit 435f5aa4421782af197b98d8525263977be4af5c
	Fixed in 6.1 with commit 3f8ef65af927db247418d4e1db49164d7a158fc5

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2022-50409
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	net/core/stream.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/1f48ab20b80f39c0d85119243109d02946fde6d5
	https://git.kernel.org/stable/c/5fe03917bb017d9af68a95f989f1c122eebc69a6
	https://git.kernel.org/stable/c/a76462dbdd8bddcbeec9463bc9e54e509b860762
	https://git.kernel.org/stable/c/65029aaedd15d9fe5ea1a899134e236d83f627bb
	https://git.kernel.org/stable/c/124b7c773271f06af5a2cea694b283cdb5275cf5
	https://git.kernel.org/stable/c/35f5e70bdfa7432762ac4ffa75e5a7574ac5563e
	https://git.kernel.org/stable/c/435f5aa4421782af197b98d8525263977be4af5c
	https://git.kernel.org/stable/c/3f8ef65af927db247418d4e1db49164d7a158fc5
