From bippy-c9c4e1df01b2 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2022-48950: perf: Fix perf_pending_task() UaF
Message-Id: <2024102141-CVE-2022-48950-dc5f@gregkh>
Content-Length: 2409
Lines: 67
X-Developer-Signature: v=1; a=openpgp-sha256; l=2477;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=LAb3GYgKwSuJbuyrm3buoDDEeIGYyQ3QhsKALvufjKQ=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDOliW0TPRwuaC51on7hChC2Y/dGrq2subHMwqu9e6aPdl
 Sx36+CijlgWBkEmBlkxRZYv23iO7q84pOhlaHsaZg4rE8gQBi5OAZjILkeG+Xk9qVedNVa0fH70
 ZE795B+9BfU23gxzRRtET+nl7p+y+sG0slvxnP+EViltBgA=
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

perf: Fix perf_pending_task() UaF

Per syzbot it is possible for perf_pending_task() to run after the
event is free()'d. There are two related but distinct cases:

 - the task_work was already queued before destroying the event;
 - destroying the event itself queues the task_work.

The first cannot be solved using task_work_cancel() since
perf_release() itself might be called from a task_work (____fput),
which means the current->task_works list is already empty and
task_work_cancel() won't be able to find the perf_pending_task()
entry.

The simplest alternative is extending the perf_event lifetime to cover
the task_work.

The second is just silly, queueing a task_work while you know the
event is going away makes no sense and is easily avoided by
re-arranging how the event is marked STATE_DEAD and ensuring it goes
through STATE_OFF on the way down.

The Linux kernel CVE team has assigned CVE-2022-48950 to this issue.


Affected and fixed versions
===========================

	Fixed in 5.15.84 with commit 8bffa95ac19f
	Fixed in 6.0.14 with commit 78e1317a174e
	Fixed in 6.1 with commit 517e6a301f34

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2022-48950
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	kernel/events/core.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/8bffa95ac19ff27c8261904f89d36c7fcf215d59
	https://git.kernel.org/stable/c/78e1317a174edbfd1182599bf76c092a2877672c
	https://git.kernel.org/stable/c/517e6a301f34613bff24a8e35b5455884f2d83d8
