From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2022-50488: block, bfq: fix possible uaf for 'bfqq->bic'
Message-Id: <2025100413-CVE-2022-50488-32e8@gregkh>
Content-Length: 4873
Lines: 128
X-Developer-Signature: v=1; a=openpgp-sha256; l=5002;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=lVLWVIsp55tgKPekBEz/LK0TPnZypuTsL3lpE2sMsF4=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBkPnQrPnUsJFl1WfmWXRBxbasQ0y/aXRn9PzTqW8jqgq
 PtYHuu9jlgWBkEmBlkxRZYv23iO7q84pOhlaHsaZg4rE8gQBi5OAZiIShjDfK+4Sye8/KIuXa9r
 YxS7+jvvYloGO8OCk0cUvVaXGFycduHuLsX/0z++PCi0GQA=
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

block, bfq: fix possible uaf for 'bfqq->bic'

Our test report a uaf for 'bfqq->bic' in 5.10:

==================================================================
BUG: KASAN: use-after-free in bfq_select_queue+0x378/0xa30

CPU: 6 PID: 2318352 Comm: fsstress Kdump: loaded Not tainted 5.10.0-60.18.0.50.h602.kasan.eulerosv2r11.x86_64 #1
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58-20220320_160524-szxrtosci10000 04/01/2014
Call Trace:
 bfq_select_queue+0x378/0xa30
 bfq_dispatch_request+0xe8/0x130
 blk_mq_do_dispatch_sched+0x62/0xb0
 __blk_mq_sched_dispatch_requests+0x215/0x2a0
 blk_mq_sched_dispatch_requests+0x8f/0xd0
 __blk_mq_run_hw_queue+0x98/0x180
 __blk_mq_delay_run_hw_queue+0x22b/0x240
 blk_mq_run_hw_queue+0xe3/0x190
 blk_mq_sched_insert_requests+0x107/0x200
 blk_mq_flush_plug_list+0x26e/0x3c0
 blk_finish_plug+0x63/0x90
 __iomap_dio_rw+0x7b5/0x910
 iomap_dio_rw+0x36/0x80
 ext4_dio_read_iter+0x146/0x190 [ext4]
 ext4_file_read_iter+0x1e2/0x230 [ext4]
 new_sync_read+0x29f/0x400
 vfs_read+0x24e/0x2d0
 ksys_read+0xd5/0x1b0
 do_syscall_64+0x33/0x40
 entry_SYSCALL_64_after_hwframe+0x61/0xc6

Commit 3bc5e683c67d ("bfq: Split shared queues on move between cgroups")
changes that move process to a new cgroup will allocate a new bfqq to
use, however, the old bfqq and new bfqq can point to the same bic:

1) Initial state, two process with io in the same cgroup.

Process 1       Process 2
 (BIC1)          (BIC2)
  |  Λ            |  Λ
  |  |            |  |
  V  |            V  |
  bfqq1           bfqq2

2) bfqq1 is merged to bfqq2.

Process 1       Process 2
 (BIC1)          (BIC2)
  |               |
   \-------------\|
                  V
  bfqq1           bfqq2(coop)

3) Process 1 exit, then issue new io(denoce IOA) from Process 2.

 (BIC2)
  |  Λ
  |  |
  V  |
  bfqq2(coop)

4) Before IOA is completed, move Process 2 to another cgroup and issue io.

Process 2
 (BIC2)
   Λ
   |\--------------\
   |                V
  bfqq2           bfqq3

Now that BIC2 points to bfqq3, while bfqq2 and bfqq3 both point to BIC2.
If all the requests are completed, and Process 2 exit, BIC2 will be
freed while there is no guarantee that bfqq2 will be freed before BIC2.

Fix the problem by clearing bfqq->bic while bfqq is detached from bic.

The Linux kernel CVE team has assigned CVE-2022-50488 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.10.121 with commit 4dfc12f8c94c8052e975060f595938f75e8b7165 and fixed in 5.10.175 with commit 5533742c7cb1bc9b1f0bf401cc397d44a3a9e07a
	Issue introduced in 5.15.46 with commit 81b7d0c717a487ec50e2924a773ff501ee40f0d5 and fixed in 5.15.86 with commit 094f3d9314d67691cb21ba091c1b528f6e3c4893
	Issue introduced in 5.19 with commit 3bc5e683c67d94bd839a1da2e796c15847b51b69 and fixed in 6.0.16 with commit b22fd72bfebda3956efc4431b60ddfc0a51e03e0
	Issue introduced in 5.19 with commit 3bc5e683c67d94bd839a1da2e796c15847b51b69 and fixed in 6.1.2 with commit 761564d93c8265f65543acf0a576b32d66bfa26a
	Issue introduced in 5.19 with commit 3bc5e683c67d94bd839a1da2e796c15847b51b69 and fixed in 6.2 with commit 64dc8c732f5c2b406cc752e6aaa1bd5471159cab
	Issue introduced in 5.4.198 with commit 31326bf551269fb9bafa84ca99172b8340e5d8f8
	Issue introduced in 5.17.14 with commit 43c51b86dbe551cff5d39b88aa2f41d29479f9c4
	Issue introduced in 5.18.3 with commit 8615f6c0c9e7cf0ca90b6b5408784d797cbe5621

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2022-50488
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	block/bfq-iosched.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/5533742c7cb1bc9b1f0bf401cc397d44a3a9e07a
	https://git.kernel.org/stable/c/094f3d9314d67691cb21ba091c1b528f6e3c4893
	https://git.kernel.org/stable/c/b22fd72bfebda3956efc4431b60ddfc0a51e03e0
	https://git.kernel.org/stable/c/761564d93c8265f65543acf0a576b32d66bfa26a
	https://git.kernel.org/stable/c/64dc8c732f5c2b406cc752e6aaa1bd5471159cab
