From bippy-1.1.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2022-49837: bpf: Fix memory leaks in __check_func_call
Message-Id: <2025050139-CVE-2022-49837-c13b@gregkh>
Content-Length: 3298
Lines: 77
X-Developer-Signature: v=1; a=openpgp-sha256; l=3376;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=wKHvbDnP998AlJGUTkpSYyOhJWjVX0cT0q0kSF4VbcI=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBnCDYuZLtnE1UxdeKtOo8Xna+u9rZuk2s1MdG5KSU6ef
 XKW2q5HHbEsDIJMDLJiiixftvEc3V9xSNHL0PY0zBxWJpAhDFycAjCRDzsZ5ju6fj5wKeLh/LeP
 o3qdjoRnPtsT3c0wV+jswu/lfIsOc++dLcbB1nr5gcepdgA=
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

bpf: Fix memory leaks in __check_func_call

kmemleak reports this issue:

unreferenced object 0xffff88817139d000 (size 2048):
  comm "test_progs", pid 33246, jiffies 4307381979 (age 45851.820s)
  hex dump (first 32 bytes):
    01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  backtrace:
    [<0000000045f075f0>] kmalloc_trace+0x27/0xa0
    [<0000000098b7c90a>] __check_func_call+0x316/0x1230
    [<00000000b4c3c403>] check_helper_call+0x172e/0x4700
    [<00000000aa3875b7>] do_check+0x21d8/0x45e0
    [<000000001147357b>] do_check_common+0x767/0xaf0
    [<00000000b5a595b4>] bpf_check+0x43e3/0x5bc0
    [<0000000011e391b1>] bpf_prog_load+0xf26/0x1940
    [<0000000007f765c0>] __sys_bpf+0xd2c/0x3650
    [<00000000839815d6>] __x64_sys_bpf+0x75/0xc0
    [<00000000946ee250>] do_syscall_64+0x3b/0x90
    [<0000000000506b7f>] entry_SYSCALL_64_after_hwframe+0x63/0xcd

The root case here is: In function prepare_func_exit(), the callee is
not released in the abnormal scenario after "state->curframe--;". To
fix, move "state->curframe--;" to the very bottom of the function,
right when we free callee and reset frame[] pointer to NULL, as Andrii
suggested.

In addition, function __check_func_call() has a similar problem. In
the abnormal scenario before "state->curframe++;", the callee also
should be released by free_func_state().

The Linux kernel CVE team has assigned CVE-2022-49837 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 4.20 with commit fd978bf7fd312581a7ca454a991f0ffb34c4204b and fixed in 5.15.80 with commit d4944497827a3d14bc5a26dbcfb7433eb5a956c0
	Issue introduced in 4.20 with commit fd978bf7fd312581a7ca454a991f0ffb34c4204b and fixed in 6.0.10 with commit 83946d772e756734a900ef99dbe0aeda506adf37
	Issue introduced in 4.20 with commit fd978bf7fd312581a7ca454a991f0ffb34c4204b and fixed in 6.1 with commit eb86559a691cea5fa63e57a03ec3dc9c31e97955

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2022-49837
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	kernel/bpf/verifier.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/d4944497827a3d14bc5a26dbcfb7433eb5a956c0
	https://git.kernel.org/stable/c/83946d772e756734a900ef99dbe0aeda506adf37
	https://git.kernel.org/stable/c/eb86559a691cea5fa63e57a03ec3dc9c31e97955
