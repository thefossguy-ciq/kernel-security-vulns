From bippy-1.2.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2022-50550: blk-iolatency: Fix memory leak on add_disk() failures
Message-Id: <2025100759-CVE-2022-50550-7147@gregkh>
Content-Length: 3069
Lines: 66
X-Developer-Signature: v=1; a=openpgp-sha256; l=3136;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=t9jEUiuAyyrrzTvK6Zn2+110uufMJcxwZhXbdKCCQWM=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBlP9W9fvB3X5mdW633W77rdyr8mfN5f38+pX/L6QUl/9
 +Zfvt23O2JZGASZGGTFFFm+bOM5ur/ikKKXoe1pmDmsTCBDGLg4BWAi0XkM81317EWPh01KDNx1
 eV0q+wKVX1dWtDEsOGutH6PY+ffqa0mXLdKF50JrM5tdAQ==
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

blk-iolatency: Fix memory leak on add_disk() failures

When a gendisk is successfully initialized but add_disk() fails such as when
a loop device has invalid number of minor device numbers specified,
blkcg_init_disk() is called during init and then blkcg_exit_disk() during
error handling. Unfortunately, iolatency gets initialized in the former but
doesn't get cleaned up in the latter.

This is because, in non-error cases, the cleanup is performed by
del_gendisk() calling rq_qos_exit(), the assumption being that rq_qos
policies, iolatency being one of them, can only be activated once the disk
is fully registered and visible. That assumption is true for wbt and iocost,
but not so for iolatency as it gets initialized before add_disk() is called.

It is desirable to lazy-init rq_qos policies because they are optional
features and add to hot path overhead once initialized - each IO has to walk
all the registered rq_qos policies. So, we want to switch iolatency to lazy
init too. However, that's a bigger change. As a fix for the immediate
problem, let's just add an extra call to rq_qos_exit() in blkcg_exit_disk().
This is safe because duplicate calls to rq_qos_exit() become noop's.

The Linux kernel CVE team has assigned CVE-2022-50550 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 4.19 with commit d70675121546c35feaceebf7ed9caed8716640f3 and fixed in 6.0.17 with commit 2a126e1db5553ce4498290df019866952f858954
	Issue introduced in 4.19 with commit d70675121546c35feaceebf7ed9caed8716640f3 and fixed in 6.1.2 with commit 215f9437dda09531bcb80605298a24219f01cec5
	Issue introduced in 4.19 with commit d70675121546c35feaceebf7ed9caed8716640f3 and fixed in 6.2 with commit 813e693023ba10da9e75067780f8378465bf27cc

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2022-50550
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	block/blk-cgroup.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/2a126e1db5553ce4498290df019866952f858954
	https://git.kernel.org/stable/c/215f9437dda09531bcb80605298a24219f01cec5
	https://git.kernel.org/stable/c/813e693023ba10da9e75067780f8378465bf27cc
