From bippy-1.1.0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@kernel.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2022-49878: bpf, verifier: Fix memory leak in array reallocation for stack state
Message-Id: <2025050153-CVE-2022-49878-1e05@gregkh>
Content-Length: 3253
Lines: 74
X-Developer-Signature: v=1; a=openpgp-sha256; l=3328;
 i=gregkh@linuxfoundation.org; h=from:subject:message-id;
 bh=mlcSbL5h44A04hy2S33XRmMleagAGh3TYNF+6lGIbhQ=;
 b=owGbwMvMwCRo6H6F97bub03G02pJDBnCDRsFDu5IEc3nqEjK2GWv7BntN2nL869eHV2lzXwHV
 vmdeM/YEcvCIMjEICumyPJlG8/R/RWHFL0MbU/DzGFlAhnCwMUpABPR4WOYn6oelbxrS2E4C2vx
 deciRbcaixs9DPMrZ56esFnrxLEVP0y+cs35Ol1gzXtJAA==
X-Developer-Key: i=gregkh@linuxfoundation.org; a=openpgp;
 fpr=F4B60CC5BF78C2214A313DCB3147D40DDB2DFB29

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

bpf, verifier: Fix memory leak in array reallocation for stack state

If an error (NULL) is returned by krealloc(), callers of realloc_array()
were setting their allocation pointers to NULL, but on error krealloc()
does not touch the original allocation. This would result in a memory
resource leak. Instead, free the old allocation on the error handling
path.

The memory leak information is as follows as also reported by Zhengchao:

  unreferenced object 0xffff888019801800 (size 256):
  comm "bpf_repo", pid 6490, jiffies 4294959200 (age 17.170s)
  hex dump (first 32 bytes):
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  backtrace:
    [<00000000b211474b>] __kmalloc_node_track_caller+0x45/0xc0
    [<0000000086712a0b>] krealloc+0x83/0xd0
    [<00000000139aab02>] realloc_array+0x82/0xe2
    [<00000000b1ca41d1>] grow_stack_state+0xfb/0x186
    [<00000000cd6f36d2>] check_mem_access.cold+0x141/0x1341
    [<0000000081780455>] do_check_common+0x5358/0xb350
    [<0000000015f6b091>] bpf_check.cold+0xc3/0x29d
    [<000000002973c690>] bpf_prog_load+0x13db/0x2240
    [<00000000028d1644>] __sys_bpf+0x1605/0x4ce0
    [<00000000053f29bd>] __x64_sys_bpf+0x75/0xb0
    [<0000000056fedaf5>] do_syscall_64+0x35/0x80
    [<000000002bd58261>] entry_SYSCALL_64_after_hwframe+0x63/0xcd

The Linux kernel CVE team has assigned CVE-2022-49878 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.14 with commit c69431aab67a912836e5831f03d99a819c14c9c3 and fixed in 5.15.79 with commit 06615967d4889b08b19ff3dda96e8b131282f73d
	Issue introduced in 5.14 with commit c69431aab67a912836e5831f03d99a819c14c9c3 and fixed in 6.0.9 with commit 3e210891c4a4c2d858cd6f9f61d5809af251d4df
	Issue introduced in 5.14 with commit c69431aab67a912836e5831f03d99a819c14c9c3 and fixed in 6.1 with commit 42378a9ca55347102bbf86708776061d8fe3ece2

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2022-49878
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	kernel/bpf/verifier.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/06615967d4889b08b19ff3dda96e8b131282f73d
	https://git.kernel.org/stable/c/3e210891c4a4c2d858cd6f9f61d5809af251d4df
	https://git.kernel.org/stable/c/42378a9ca55347102bbf86708776061d8fe3ece2
